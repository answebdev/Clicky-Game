{"version":3,"sources":["img/homer-logo.png","sound/doh.mp3","sound/woohoo.mp3","components/Card/Card.js","components/Navbar/Navbar.js","components/Jumbotron/Jumbotron.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","props","react_default","a","createElement","className","onClick","clickHandler","id","alt","name","src","image","Navbar","homer","href","this","message","currentScore","topScore","Component","Jumbotron","Footer","class","App","state","sound1","sound2","characters","clicked","document","getElementById","textContent","_this","indexOf","handleIncrement","handleSound2End","setState","concat","Reset","newScore","swal","handleShuffle","NavReset","e","preventDefault","shuffledCards","array","i","length","j","Math","floor","random","_ref","shuffleCards","_this2","components_Navbar_Navbar","lib_default","doh","playing","woohoo","onEnd","components_Jumbotron_Jumbotron","map","components_Card_Card","key","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61896584.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/homer-logo.097b3d75.png\";","module.exports = __webpack_public_path__ + \"static/media/doh.1c18bd9a.mp3\";","module.exports = __webpack_public_path__ + \"static/media/woohoo.c76f106b.mp3\";","import React from \"react\";\nimport './Card.css';\n\n// Pass the image into each card so all 12 are rendered\nconst Card = (props) => (\n    <div className=\"container\">\n        <div className=\"card\" onClick={() => props.clickHandler(props.id)}>\n            <div className=\"img-container\">\n                <img alt={props.name} src={props.image} />\n            </div>\n        </div>\n    </div>\n);\n\nexport default Card;\n","import React, { Component } from 'react';\nimport homer from \"../../img/homer-logo.png\";\nimport \"./Navbar.css\";\n\nclass Navbar extends Component {\n    render() {\n        return (\n            <nav className=\"navbar fixed-top navbar-expand-lg navbar-dark bg-primary\"><img id=\"homer-logo\" src={homer} alt=\"Homer logo\" />\n                <a className=\"navbar-brand\" id=\"simpsons-title\" href=\"/clicky-game\">The Simpsons Clicky Game</a>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n                    <ul className=\"navbar-nav\">\n                        <li className=\"nav-item\">\n                            <span className=\"navbar-brand animated rubberBand\" id=\"instructions\">Click on an image to begin!</span><span className=\"animated rubberBand\" id=\"message\">{this.props.message}</span>\n                        </li>\n                        <li className=\"nav-item\">\n                            <span className=\"navbar-brand\" id=\"score\">Score: {this.props.currentScore} | Top Score: {this.props.topScore}</span>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        )\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport './Jumbotron.css';\n\nclass Jumbotron extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"jumbotron\">\n                    <br />\n                    <div id=\"inner-jumbo\">\n                        <h1 className=\"display-4\" id=\"jumbo-title\">The Simpsons Clicky Game</h1>\n                        <p className=\"lead\" id=\"jumbo-lead\">Click on an image to earn points, but don't click on any more than once!</p>\n                        <br />\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default Jumbotron;","import React, { Component } from 'react';\nimport \"./Footer.css\";\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                <div className=\"container\">\n                    <span id=\"footer-text\">The Simpsons Clicky Game &nbsp;<i id=\"react\" class=\"fab fa-react\"></i></span>\n                </div>\n            </footer>\n\n        )\n    }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport Card from './components/Card/Card';\nimport Navbar from './components/Navbar/Navbar';\nimport Jumbotron from './components/Jumbotron/Jumbotron';\nimport Footer from './components/Footer/Footer';\nimport characters from './characters.json';\nimport swal from 'sweetalert';\nimport './App.css';\nimport ReactHowler from 'react-howler'\nimport doh from \"./sound/doh.mp3\";\nimport woohoo from \"./sound/woohoo.mp3\";\n\n// Shuffle the cards\nfunction shuffleCards(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nclass App extends Component {\n  // Set the state\n  state = {\n    sound1: false,\n    sound2: false,\n    characters,\n    currentScore: 0,\n    topScore: 0,\n    message: \"\",\n    clicked: []\n  };\n\n  // Set the click handler for when user clicks on the card\n  clickHandler = id => {\n    let instructionsText = document.getElementById(\"instructions\");\n    instructionsText.textContent = \"\";\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.handleSound2End();\n      this.setState({\n        clicked: this.state.clicked.concat(id),\n        sound1: false,\n        sound2: false\n      });\n    } else {\n      this.Reset();\n    }\n  };\n\n  // Function that prevents audio from getting cut off\n  handleSound2End = () => {\n    this.setState({\n      sound2: false\n    })\n  }\n\n  // Handle the increment that adds one each time a different card is clicked\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScore,\n      message: \"\"\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({ topScore: newScore });\n    }\n    if (newScore === 12) {\n      this.setState({\n        currentScore: 0,\n        clicked: []\n      }, function () {\n        this.setState({\n          clicked: [],\n          sound2: true\n        })\n      });\n      this.handleSound2End();\n      swal(\"Woohoo!\", \"Good job! You win!\");\n      // this.setState({\n      //   sound2: true\n      // });\n    }\n    this.handleShuffle();\n  };\n\n  // Reset the score to 0\n  Reset = () => {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      clicked: []\n    });\n    swal(\"D'oh!\", \"Sorry, you lose.\");\n    this.setState({\n      sound1: true\n    });\n    this.handleShuffle();\n  };\n\n  // Reset by clicking Navbar title\n  NavReset = (e) => {\n    e.preventDefault();\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n\n  // Handle the shuffling of cards\n  handleShuffle = () => {\n    let shuffledCards = shuffleCards(characters);\n    this.setState({ characters: shuffledCards });\n  };\n\n  // Render the components\n  render() {\n    return (\n      <div>\n        <Navbar\n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n          message={this.state.message}\n        />\n        <ReactHowler\n          src={doh}\n          playing={this.state.sound1}\n        />\n        <ReactHowler\n          src={woohoo}\n          playing={this.state.sound2}\n          onEnd={this.handleSound2End}\n        />\n        <Jumbotron />\n        {this.state.characters.map(characters => (\n          <Card\n            key={characters.id}\n            clickHandler={this.clickHandler}\n            handleShuffle={this.handleShuffle}\n            id={characters.id}\n            image={characters.image}\n          />\n        ))}\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}